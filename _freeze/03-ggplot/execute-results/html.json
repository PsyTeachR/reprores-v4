{
  "hash": "8066f0f54bf4d8d38b03d35a1e77640b",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Visualisation {#ggplot}\n\n<div class=\"right meme\"><img src=\"images/memes/better_graphs.png\" \n     alt = \"xkcd comic titled 'General quality of charts and graphs in scientific papers'; y-axis: BAD on the bottom to GOOD on the top; x-axis: 1950s to 2010s; Line graph increases with time except for a dip between 1990 and 2010 labelled POWERPOINT/MSPAINT ERA\" /></div>\n\n## Learning Objectives {#ilo-ggplot}\n\n### Basic {-}\n\n1. Understand what types of graphs are best for [different types of data](#vartypes) [(video)](https://youtu.be/tOFQFPRgZ3M){class=\"video\"}\n2. Create common types of graphs with ggplot2 [(video)](https://youtu.be/kKlQupjD__g){class=\"video\"}\n3. Set custom [size](#custom-size),\n              [labels](#custom-labels), \n              [colours](#custom-colours), and\n              [themes](#themes) [(video)](https://youtu.be/6pHuCbOh86s){class=\"video\"}\n4. [Combine plots](#combo_plots) on the same plot, as facets, or as a grid using patchwork [(video)](https://youtu.be/AnqlfuU-VZk){class=\"video\"}\n5. [Save plots](#ggsave) as an image file [(video)](https://youtu.be/f1Y53mjEli0){class=\"video\"}\n    \n### Intermediate {-}\n\n6. Add lines to graphs\n7. Deal with [overlapping data](#overlap)\n8. Create less common types of graphs\n9. Adjust axes (e.g., flip coordinates, set axis limits)\n\n\n## Setup {#setup-ggplot}\n\n1. Open your `reprores-class-notes` project \n1. Create a new quarto file called `03-ggplot.qmd`\n1. Update the YAML header \n1. Replace the setup chunk with the one below: \n\n\n::: {.cell layout-align=\"center\" verbatim='r setup, include = FALSE'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r setup, include = FALSE}</code></pre>\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\n\n# packages needed for this chapter\nlibrary(tidyverse)   # loads ggplot2 for plots\nlibrary(patchwork)   # multi-part plots\nlibrary(plotly)      # interactive plots\n\nset.seed(30250) # makes sure random numbers are reproducible\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\nDownload the [ggplot2 cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf).\n\n## Common Variable Combinations {#vartypes}\n\n<a href='https://psyteachr.github.io/glossary/c#continuous' target='_blank' class='glossary' title='Data that can take on any values between other existing values.'>Continuous</a> variables are properties you can measure, like height. <a href='https://psyteachr.github.io/glossary/d#discrete' target='_blank' class='glossary' title='Data that can only take certain values, such as integers.'>Discrete</a> variables are things you can count, like the number of pets you have. Categorical variables can be <a href='https://psyteachr.github.io/glossary/n#nominal' target='_blank' class='glossary' title='Categorical variables that don't have an inherent order, such as types of animal.'>nominal</a>, where the categories don't really have an order, like cats, dogs and ferrets (even though ferrets are obviously best). They can also be <a href='https://psyteachr.github.io/glossary/o#ordinal' target='_blank' class='glossary' title='Discrete variables that have an inherent order, such as level of education or dislike/like.'>ordinal</a>, where there is a clear order, but the distance between the categories isn't something you could exactly equate, like points on a <a href='https://psyteachr.github.io/glossary/l#likert' target='_blank' class='glossary' title='A rating scale with a small number of discrete points in order'>Likert</a> rating scale.\n\nDifferent types of visualisations are good for different types of variables. \n\nLoad the `pets` dataset and explore it with `glimpse(pets)` or `View(pets)`. This is a simulated dataset with one random factor (`id`), two categorical factors (`pet`, `country`) and three continuous variables (`score`, `age`, `weight`). \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npets <- read_csv(\"https://psyteachr.github.io/reprores/data/pets.csv\", \n                 col_types = \"cffiid\")\nglimpse(pets)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 800\nColumns: 6\n$ id      <chr> \"S001\", \"S002\", \"S003\", \"S004\", \"S005\", \"S006\", \"S007\", \"S008\"…\n$ pet     <fct> dog, dog, dog, dog, dog, dog, dog, dog, dog, dog, dog, dog, do…\n$ country <fct> UK, UK, UK, UK, UK, UK, UK, UK, UK, UK, UK, UK, UK, UK, UK, UK…\n$ score   <int> 90, 107, 94, 120, 111, 110, 100, 107, 106, 109, 85, 110, 102, …\n$ age     <int> 6, 8, 2, 10, 4, 8, 9, 8, 6, 11, 5, 9, 1, 10, 7, 8, 1, 8, 5, 13…\n$ weight  <dbl> 19.78932, 20.01422, 19.14863, 19.56953, 21.39259, 21.31880, 19…\n```\n\n\n:::\n:::\n\n\n\n::: {.try data-latex=\"\"}\nBefore you read ahead, come up with an example of each type of variable combination and sketch the types of graphs that would best display these data.\n\n* 1 categorical\n* 1 continuous\n* 2 categorical\n* 2 continuous\n* 1 categorical, 1 continuous\n* 3 continuous\n:::\n\n\n## Basic Plots\n\nR has some basic plotting functions, but they're difficult to use and aesthetically not very nice without a fair amount of expertise. They can be useful to have a quick look at data while you're working on a script, though. The function `plot()` usually defaults to a sensible type of plot, depending on whether the arguments `x` and `y` are categorical, continuous, or missing.\n\n<!-- Tab links -->\n<div class=\"tab\">\n  <button class=\"tablinks\" onclick=\"openCity(event, 'catx')\">Categorical X</button>\n  <button class=\"tablinks\" onclick=\"openCity(event, 'catxy')\">Categorical X and Y</button>\n  <button class=\"tablinks\" onclick=\"openCity(event, 'contxy')\">Continuous X and Y</button>\n</div>\n\n<!-- Tab content -->\n<div id=\"catx\" class=\"tabcontent\">\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(x = pets$pet)\n```\n\n::: {.cell-output-display}\n![plot() with categorical x](03-ggplot_files/figure-html/plot0-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n</div>\n<div id=\"catxy\" class=\"tabcontent\">\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(x = pets$pet, y = pets$score)\n```\n\n::: {.cell-output-display}\n![plot() with categorical x and continuous y](03-ggplot_files/figure-html/plot1-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n</div>\n<div id=\"contxy\" class=\"tabcontent\">\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(x = pets$age, y = pets$weight)\n```\n\n::: {.cell-output-display}\n![plot() with continuous x and y](03-ggplot_files/figure-html/plot2-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n</div>\n\n\nThe function `hist()` creates a quick histogram so you can see the distribution of your data. You can adjust how many columns are plotted with the argument `breaks`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhist(pets$score, breaks = 20)\n```\n\n::: {.cell-output-display}\n![hist()](03-ggplot_files/figure-html/hist-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## GGplots\n\nWhile the functions above are nice for quick visualisations, it's hard to make pretty, publication-ready plots. The package <code class='package'>ggplot2</code> (loaded with `tidyverse`) is one of the most common packages for creating beautiful visualisations.\n\n`ggplot2` creates plots using a \"grammar of graphics\" where you add <a href='https://psyteachr.github.io/glossary/g#geom' target='_blank' class='glossary' title='The geometric style in which data are displayed, such as boxplot, density, or histogram.'>geoms</a> in layers. It can be complex to understand at first, but it's very powerful once you have a mental model of how it works. \n\nA grammar of graphics (the \"gg\" in \"ggplot\") is a standardised way to describe the components of a graphic. <code class='package'>ggplot2</code> uses a layered grammar of graphics, in which plots are built up in a series of layers. It may be helpful to think about any picture as having multiple elements that sit semi-transparently over each other. A good analogy is old Disney movies where artists would create a background and then add moveable elements on top of the background via transparencies.\n\nFigure\\ \\@ref(fig:layers) displays the evolution of a simple plot using this layered approach. First, the plot space is built (layer 1); the variables are specified (layer 2); the type of visualisation (known as a geom) that is desired for these variables is specified (layer 3) - in this case geom_violin() is called to visualise the distribution; the colours are customised (layer 4); the axis labels and ranges are edited for readability (layer 5); and a theme is applied to change the overall appearance of the plot  and the legend position is customised (layer 6).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Evolution of a layered plot](03-ggplot_files/figure-html/layers-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n<!-- Tab links -->\n<div class=\"tab\">\n  <button class=\"tablinks\" onclick=\"openCity(event, 'layer1')\">Layer 1</button>\n  <button class=\"tablinks\" onclick=\"openCity(event, 'layer2')\">Layer 2</button>\n  <button class=\"tablinks\" onclick=\"openCity(event, 'layer3')\">Layer 3</button>\n  <button class=\"tablinks\" onclick=\"openCity(event, 'layer4')\">Layer 4</button>\n  <button class=\"tablinks\" onclick=\"openCity(event, 'layer5')\">Layer 5</button>\n  <button class=\"tablinks\" onclick=\"openCity(event, 'layer6')\">Layer 6</button>\n</div>\n\n<!-- Tab content -->\n<div id=\"layer1\" class=\"tabcontent\">\n\nLet's start with a totally empty plot layer created by the `ggplot()` function with no arguments.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot()\n```\n\n::: {.cell-output-display}\n![A plot base created by ggplot()](03-ggplot_files/figure-html/ggplot-empty-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n</div>\n<div id=\"layer2\" class=\"tabcontent\">\n\nThe first argument to `ggplot()` is the `data` table you want to plot. Let's use the `pets` data we loaded above. The second argument is the `mapping` for which columns in your data table correspond to which properties of the plot, such as the `x`-axis, the `y`-axis, line `colour` or `linetype`, point `shape`, or object `fill`. These mappings are specified by the `aes()` function. Just adding this to the `ggplot` function creates the labels and ranges for the `x` and `y` axes. They usually have sensible default values, given your data, but we'll learn how to change them later.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmapping <- aes(x = pet, \n               y = score, \n               colour = country, \n               fill = country)\n\nggplot(data = pets, mapping = mapping)\n```\n\n::: {.cell-output-display}\n![Empty ggplot with x and y labels](03-ggplot_files/figure-html/ggplot-aes-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.info data-latex=\"\"}\nPeople usually omit the argument names and just put the `aes()` function directly as the second argument to `ggplot`. They also usually omit `x` and `y` as argument names to `aes()` (but you have to name the other properties). \n:::\n\n</div>\n<div id=\"layer3\" class=\"tabcontent\">\n\nNext we can add \"geoms\", or plot styles. You literally add them with the `+` symbol. You can customise the appearance of a geom with arguments like `alpha` (sets transparency).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, colour = country, fill = country)) +\n  geom_violin(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![Violin plot with country represented by colour.](03-ggplot_files/figure-html/ggplot-geom-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n</div>\n<div id=\"layer4\" class=\"tabcontent\">\n\nThe `scale_*` functions help you to customise the aesthetics.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, colour = country, fill = country)) +\n  geom_violin(alpha = 0.5) +\n  scale_fill_manual(values = c(\"orange\", \"orchid\")) +\n  scale_colour_manual(values = c(\"orange\", \"orchid\"))\n```\n\n::: {.cell-output-display}\n![Customised colours.](03-ggplot_files/figure-html/ggplot-color-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n</div>\n<div id=\"layer5\" class=\"tabcontent\">\n\nFurther customise the image by setting the y-axis breaks and limits, and editing the labels.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, colour = country, fill = country)) +\n  geom_violin(alpha = 0.5) +\n  scale_fill_manual(values = c(\"orange\", \"orchid\")) +\n  scale_colour_manual(values = c(\"orange\", \"orchid\")) +\n  scale_y_continuous(breaks = c(50, 100, 150)) +\n  coord_cartesian(ylim = c(50, 150)) +\n  labs(x = \"Pet type\",\n       y = \"Score on an Important Test\",\n       colour = \"Country of Origin\",\n       fill = \"Country of Origin\")\n```\n\n::: {.cell-output-display}\n![Customised axis labels.](03-ggplot_files/figure-html/ggplot-labels-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n</div>\n<div id=\"layer6\" class=\"tabcontent\">\n\nFinally, change the theme and base font size and customise the legend position.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, colour = country, fill = country)) +\n  geom_violin(alpha = 0.5) +\n  scale_fill_manual(values = c(\"orange\", \"orchid\")) +\n  scale_colour_manual(values = c(\"orange\", \"orchid\")) +\n  scale_y_continuous(breaks = c(50, 100, 150)) +\n  coord_cartesian(ylim = c(50, 150)) +\n  labs(x = \"Pet type\",\n       y = \"Score on an Important Test\",\n       colour = \"Country of Origin\",\n       fill = \"Country of Origin\") +\n  theme_minimal(base_size = 13) +\n  theme(legend.position = c(.83, .17))\n```\n\n::: {.cell-output-display}\n![Customised theme and legend position.](03-ggplot_files/figure-html/ggplot-theme-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n</div>\n\n## Common Plot Types\n\nThere are many geoms, and they can take different arguments to customise their appearance. We'll learn about some of the most common below.\n\n### Bar plot {#geom_bar}\n\nBar plots are good for categorical data where you want to represent the count.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![Bar plot](03-ggplot_files/figure-html/barplot-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Density plot {#geom_density}\n\nDensity plots are good for one continuous variable, but only if you have a fairly large number of observations.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(score)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![Density plot](03-ggplot_files/figure-html/density-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nYou can represent subsets of a variable by assigning the category variable to the argument `group`, `fill`, or `color`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(score, fill = pet)) +\n  geom_density(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![Grouped density plot](03-ggplot_files/figure-html/density-grouped-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.try data-latex=\"\"}\nTry changing the `alpha` argument to figure out what it does.\n:::\n\n### Frequency polygons {#geom_freqpoly}\n\nIf you want the y-axis to represent count rather than density, try `geom_freqpoly()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(score, color = pet)) +\n  geom_freqpoly(binwidth = 5)\n```\n\n::: {.cell-output-display}\n![Frequency ploygon plot](03-ggplot_files/figure-html/freqpoly-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.try data-latex=\"\"}\nTry changing the `binwidth` argument to 10 or 1. How do you figure out the right value?\n:::\n\n### Histogram {#geom_histogram}\n\nHistograms are also good for one continuous variable, and work well if you don't have many observations. Set the `binwidth` to control how wide each bar is.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(score)) +\n  geom_histogram(binwidth = 5, \n                 fill = \"white\", \n                 color = \"black\")\n```\n\n::: {.cell-output-display}\n![Histogram](03-ggplot_files/figure-html/histogram-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.info data-latex=\"\"}\nHistograms in ggplot look pretty bad unless you set the `fill` and `color`.\n:::\n\nIf you show grouped histograms, you also probably want to change the default `position` argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(score, fill=pet)) +\n  geom_histogram(binwidth = 5, \n                 alpha = 0.5, \n                 position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![Grouped Histogram](03-ggplot_files/figure-html/histogram-grouped-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.try data-latex=\"\"}\nTry changing the `position` argument to \"identity\", \"fill\", \"dodge\", or \"stack\".\n:::\n\n### Column plot {#geom_col}\n\nColumn plots are the worst way to represent grouped continuous data, but also one of the most common. If your data are already aggregated (e.g., you have rows for each group with columns for the mean and standard error), you can use `geom_bar` or `geom_col` and `geom_errorbar` directly. If not, you can use the function `stat_summary` to calculate the mean and standard error and send those numbers to the appropriate geom for plotting.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, fill=pet)) +\n  stat_summary(fun = mean, geom = \"col\", alpha = 0.5) + \n  stat_summary(fun.data = mean_se, \n               geom = \"errorbar\",\n               width = 0.25) +\n  coord_cartesian(ylim = c(80, 120))\n```\n\n::: {.cell-output-display}\n![Column plot](03-ggplot_files/figure-html/colplot-statsum-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.try data-latex=\"\"}\nTry changing the values for `coord_cartesian`. What does this do?\n:::\n\n### Boxplot {#geom_boxplot}\n\nBoxplots are great for representing the distribution of grouped continuous variables. They fix most of the problems with using bar/column plots for continuous data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, fill=pet)) +\n  geom_boxplot(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![Box plot](03-ggplot_files/figure-html/boxplot-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Violin plot {#geom_violin}\n\nViolin pots are like sideways, mirrored density plots. They give even more information than a boxplot about distribution and are especially useful when you have non-normal distributions.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, fill=pet)) +\n  geom_violin(draw_quantiles = .5,\n              trim = FALSE, \n              alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![Violin plot](03-ggplot_files/figure-html/violin-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.try data-latex=\"\"}\nTry changing the `quantile` argument. Set it to a vector of the numbers 0.1 to 0.9 in steps of 0.1.\n:::\n\n### Vertical intervals {#vertical_intervals}\n\nBoxplots and violin plots don't always map well onto inferential stats that use the mean. You can represent the mean and standard error or any other value you can calculate.\n\nHere, we will create a table with the means and standard errors for two groups. We'll learn how to calculate this from raw data in the chapter on [data wrangling](#dplyr). We also create a new object called `gg` that sets up the base of the plot. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- tibble(\n  group = c(\"A\", \"B\"),\n  mean = c(10, 20),\n  se = c(2, 3)\n)\ngg <- ggplot(dat, aes(group, mean, \n                      ymin = mean-se, \n                      ymax = mean+se))\n```\n:::\n\n\nThe trick above can be useful if you want to represent the same data in different ways. You can add different geoms to the base plot without having to re-type the base plot code.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncb <- gg + geom_crossbar() + ggtitle(\"geom_crossbar()\")\neb <- gg + geom_errorbar() + ggtitle(\"geom_errorbar()\")\nlr <- gg + geom_linerange() + ggtitle(\"geom_linerange()\")\npr <- gg + geom_pointrange() + ggtitle(\"geom_pointrange()\")\n\ncb + eb + lr + pr # combine with patchwork package\n```\n\n::: {.cell-output-display}\n![Four different styles of vertical interval](03-ggplot_files/figure-html/geom-crossbar-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\nYou can also use the function `stats_summary` to calculate mean, standard error, or any other value for your data and display it using any geom. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, color=pet)) +\n  stat_summary(fun.data = mean_se, geom = \"crossbar\") +\n  stat_summary(fun.min = function(x) mean(x) - sd(x),\n               fun.max = function(x) mean(x) + sd(x),\n               geom = \"errorbar\", width = 0) +\n  theme(legend.position = \"none\") # gets rid of the legend\n```\n\n::: {.cell-output-display}\n![Vertical intervals with stats_summary()](03-ggplot_files/figure-html/vertint-statssum-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Scatter plot {#geom_point}\n\nScatter plots are a good way to represent the relationship between two continuous variables.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Scatter plot using geom_point()](03-ggplot_files/figure-html/scatter-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Line graph {#geom_smooth}\n\nYou often want to represent the relationship as a single line.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_smooth(formula = y ~ x, method=\"lm\")\n```\n\n::: {.cell-output-display}\n![Line plot using geom_smooth()](03-ggplot_files/figure-html/smooth-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.try data-latex=\"\"}\nWhat are some other options for the `method` argument to `geom_smooth`? When might you want to use them?\n:::\n\n\n<div class='webex-solution'><button>Bonus: Non-Linear Plots</button>\n\n\n::: {.info data-latex=\"\"}\nYou can plot functions other than the linear `y ~ x`. The code below creates a data table where `x` is 101 values between -10 and 10. and `y` is `x` squared plus `3*x` plus `1`. You'll probably recognise this from algebra as the quadratic equation. You can set the `formula` argument in `geom_smooth` to a quadratic formula (`y ~ x + I(x^2)`) to fit a quadratic function to the data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nquad <- tibble(\n  x = seq(-10, 10, length.out = 101),\n  y = x^2 + 3*x + 1\n)\n\nggplot(quad, aes(x, y)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x + I(x^2), \n              method=\"lm\")\n```\n\n::: {.cell-output-display}\n![Fitting quadratic functions](03-ggplot_files/figure-html/quadratic-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n\n</div>\n\n\n## Customisation\n\n### Size and Position {#custom-size}\n\nYou can change the size, aspect ratio and position of plots in an R Markdown document in the setup chunk.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  fig.width  = 8, # figures default to 8 inches wide\n  fig.height = 5, # figures default to 5 inches tall\n  fig.path   = 'images/', # figures saved in images directory\n  out.width = \"90%\", # images take up 90% of page width\n  fig.align = 'center' # centre images\n)\n```\n:::\n\n\nYou can change defaults for any single image using <a href='https://psyteachr.github.io/glossary/c#chunk' target='_blank' class='glossary' title='A section of code in an R Markdown file'>chunk</a> options.\n\n\n::: {.cell layout-align=\"center\" verbatim='r fig-pet1, fig.width=10, fig.height=3, out.width=\"100%\", fig.align=\"center\"'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r fig-pet1, fig.width=10, fig.height=3, out.width=\"100%\", fig.align=\"center\"}</code></pre>\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_smooth(formula = y~x, method = lm)\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![10x3 inches at 100% width centre aligned.](images/fig-chunk-example1-out-1.png){#fig-chunk-example1-out fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\" verbatim='r fig-pet2, fig.width=5, fig.height=3, out.width=\"50%\", fig.align=\"left\"'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r fig-pet2, fig.width=5, fig.height=3, out.width=\"50%\", fig.align=\"left\"}</code></pre>\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_smooth(formula = y~x, method = lm)\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![5x3 inches at 50% width aligned left.](images/fig-chunk-example2-out-1.png){#fig-chunk-example2-out fig-align='left' width=50%}\n:::\n:::\n\n\n### Labels {#custom-labels}\n\nYou can set custom titles and axis labels in a few different ways.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_smooth(formula = y ~ x, method=\"lm\") +\n  labs(title = \"Pet Score by Weight and Type\",\n       x = \"Weight (in kg)\",\n       y = \"Pet Score\",\n       color = \"Pet Type\")\n```\n\n::: {.cell-output-display}\n![Set custom labels with labs()](images/line-labels1-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_smooth(formula = y ~ x, method=\"lm\") +\n  ggtitle(\"Pet Score by Weight and Type\") +\n  xlab(\"Weight (in kg)\") +\n  ylab(\"Pet Score\")\n```\n\n::: {.cell-output-display}\n![Set custom labels with individual functions](images/line-labels2-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nThe functions <code><span><span class='fu'>labs</span><span class='op'>(</span><span class='op'>)</span></span></code>, <code><span><span class='fu'>xlab</span><span class='op'>(</span><span class='op'>)</span></span></code>, and <code><span><span class='fu'>ylab</span><span class='op'>(</span><span class='op'>)</span></span></code> are convenient when you just want to change a label name, but the `scale_{aesthetic}_{type}` functions are worth learning because they let you customise many things about any aesthetic property (e.g., `x`, `y`, `colour`, `fill`, `shape`, `linetype`), as long as you choose the correct type (usually `continuous` or `discrete`, but there are also special scale functions for other data types like dates).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_smooth(formula = y ~ x, method=\"lm\") +\n  ggtitle(\"Pet Score by Weight and Type\") +\n  scale_x_continuous(name = \"Weight (in kg)\", \n                     breaks = seq(0, 26, 2),\n                     minor_breaks = NULL, \n                     position = \"top\") +\n  scale_y_continuous(name = \"Pet Score\", \n                     n.breaks = 16, \n                     trans = \"reverse\",\n                     limits = c(150, 0)) +\n  scale_color_discrete(name = \"Pet Type\", \n                       labels = c(\"Dogs\", \"Cats\", \"Ferrets\"), \n                       type = c(\"purple\", \"green\", \"orange\"))\n```\n\n::: {.cell-output-display}\n![Set custom labels with scale functions](images/line-labels3-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n::: {.try data-latex=\"\"}\nUse the help on the scale functions above to learn about the possible arguments. See what happens when you change the arguments above.\n:::\n\n### Colours {#custom-colours}\n\nYou can set custom values for colour and fill using the `scale_{aesthetic}_{type}` functions like `scale_colour_manual()` or `scale_fill_manual()`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, colour = pet, fill = pet)) +\n  geom_violin() +\n  scale_color_manual(values = c(\"darkgreen\", \"dodgerblue\", \"orange\")) +\n  scale_fill_manual(values = c(\"#CCFFCC\", \"#BBDDFF\", \"#FFCC66\"))\n```\n\n::: {.cell-output-display}\n![Set custom colour](images/line-labels-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nThe [Colours chapter in Cookbook for R](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/) has many more ways to customise colour.\n\n### Themes {#themes}\n\nGGplot comes with several additional themes and the ability to fully customise your theme. Type `?theme` into the console to see the full list. Other packages such as `cowplot` also have custom themes. You can add a custom theme to the end of your ggplot object and specify a new `base_size` to make the default fonts and lines larger or smaller.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_smooth(formula = y ~ x, method=\"lm\") +\n  theme_minimal(base_size = 18)\n```\n\n::: {.cell-output-display}\n![Minimal theme with 18-point base font size](images/themes-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nIt's more complicated, but you can fully customise your theme with `theme()`. You can save this to an object and add it to the end of all of your plots to make the style consistent. Alternatively, you can set the theme at the top of a script with `theme_set()` and this will apply to all subsequent ggplot plots. \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# always start with a base theme that is closest to your desired theme\nvampire_theme <- theme_dark() +\n  theme(\n    rect = element_rect(fill = \"black\"),\n    panel.background = element_rect(fill = \"black\"),\n    text = element_text(size = 20, colour = \"white\"),\n    axis.text = element_text(size = 16, colour = \"grey70\"),\n    line = element_line(colour = \"white\", size = 2),\n    panel.grid = element_blank(),\n    axis.line = element_line(colour = \"white\"),\n    axis.ticks = element_blank(),\n    legend.position = \"top\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n```\n\n\n:::\n\n```{.r .cell-code}\ntheme_set(vampire_theme)\n\nggplot(pets, aes(weight, score, color = pet)) +\n  geom_smooth(formula = y ~ x, method=\"lm\")\n```\n\n::: {.cell-output-display}\n![Custom theme](images/custom-themes-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n\n### Save as file {#ggsave}\n\nYou can save a ggplot using `ggsave()`. It saves the last ggplot you made, by default, but you can specify which plot you want to save if you assigned that plot to a variable.\n\nYou can set the `width` and `height` of your plot. The default units are inches, but you can change the `units` argument to \"in\", \"cm\", or \"mm\".\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbox <- ggplot(pets, aes(pet, score, fill=pet)) +\n  geom_boxplot(alpha = 0.5)\n\nviolin <- ggplot(pets, aes(pet, score, fill=pet)) +\n  geom_violin(alpha = 0.5)\n\nggsave(\"demog_violin_plot.png\", width = 5, height = 7)\n\nggsave(\"demog_box_plot.jpg\", plot = box, width = 5, height = 7)\n```\n:::\n\n\n::: {.info data-latex=\"\"}\nThe file type is set from the filename suffix, or by \nspecifying the argument `device`, which can take the following values: \n\"eps\", \"ps\", \"tex\", \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\".\n:::\n\n## Combination Plots {#combo_plots}\n\n### Violinbox plot\n\nA combination of a violin plot to show the shape of the distribution and a boxplot to show the median and interquartile ranges can be a very useful visualisation.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, fill = pet)) +\n  geom_violin(show.legend = FALSE) + \n  geom_boxplot(width = 0.2, fill = \"white\", \n               show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![Violin-box plot](images/violinbox-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n::: {.info data-latex=\"\"}\nSet the `show.legend` argument to `FALSE` to hide the legend. We do this here because the x-axis already labels the pet types.\n:::\n\n### Violin-point-range plot\n\nYou can use `stat_summary()` to superimpose a point-range plot showing the mean ± 1 SD. You'll learn how to write your own functions in the lesson on [Iteration and Functions](#func).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, fill=pet)) +\n  geom_violin(trim = FALSE, alpha = 0.5) +\n  stat_summary(\n    fun = mean,\n    fun.max = function(x) {mean(x) + sd(x)},\n    fun.min = function(x) {mean(x) - sd(x)},\n    geom=\"pointrange\"\n  )\n```\n\n::: {.cell-output-display}\n![Point-range plot using stat_summary()](images/stat-summary-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Violin-jitter plot\n\nIf you don't have a lot of data points, it's good to represent them individually. You can use `geom_jitter` to do this.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# sample_n chooses 50 random observations from the dataset\nggplot(sample_n(pets, 50), aes(pet, score, fill=pet)) +\n  geom_violin(\n    trim = FALSE,\n    draw_quantiles = c(0.25, 0.5, 0.75), \n    alpha = 0.5\n  ) + \n  geom_jitter(\n    width = 0.15, # points spread out over 15% of available width\n    height = 0, # do not move position on the y-axis\n    alpha = 0.5, \n    size = 3\n  )\n```\n\n::: {.cell-output-display}\n![Violin-jitter plot](images/violin-jitter-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Scatter-line graph\n\nIf your graph isn't too complicated, it's good to also show the individual data points behind the line.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(sample_n(pets, 50), aes(age, weight, colour = pet)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method=\"lm\")\n```\n\n::: {.cell-output-display}\n![Scatter-line plot](images/scatter-line-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Facets\n\nYou may want to replicate your plot for each level of a categorical variable. The `facet` functions make this easy. If you have a single category to facet over, such as country, you can use `facet_wrap()`, which makes a plot for each level.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, fill = pet)) +\n  geom_violin(show.legend = FALSE) + \n  facet_wrap(facets = vars(country))\n```\n\n::: {.cell-output-display}\n![Facetted plot, facetting by country.](images/facet-wrap-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n::: {.warning}\nYou can't just use unquoted column names for the `facets` argument; you have to specify them using the `vars()` function. You may see a common shortcut notation using the tilde that is equivalent: `facet_wrap(~country)`.\n:::\n\nIf you have many levels, the plots will \"wrap\" around. The function makes a best guess at what will look good, but you can also specify how many rows or columns the resulting plot should have by setting the arguments `ncol` or `nrow`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(pet, score, fill = pet)) +\n  geom_violin(show.legend = FALSE) + \n  facet_wrap(facets = vars(age), nrow = 3)\n```\n\n::: {.cell-output-display}\n![Facetted plot, facetting by age](images/facet-wrap2-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nIf you want to make sub-plots for crossed factors, you can use `facet_grid()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(weight, score)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(formula = y ~ x, method=\"lm\") + \n  facet_grid(rows = vars(pet), cols = vars(country))\n```\n\n::: {.cell-output-display}\n![Facetted plot](images/facet-grid-1.png){fig-align='center' width=90%}\n:::\n\n```{.r .cell-code}\n  # facet_grid(pet~country) # an alternative shortcut way to specify the rows and columns\n```\n:::\n\n\n::: {.try}\nLook at the help for `facet_grid()` and see what happens when you change the default values of arguments such as `margin`, `scales`, `as.table` and `switch`. \n:::\n\n\n### Grid of plots {#plot_grid}\n\nYou can use the [`patchwork`](https://patchwork.data-imaginist.com/) package to easily make grids of different graphs. First, you have to assign each plot a name. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngg <- ggplot(pets, aes(pet, score, colour = pet))\nnolegend <- theme(legend.position = 0)\n\nvp <- gg + geom_violin(alpha = 0.5) + nolegend +\n  ggtitle(\"Violin Plot\")\nbp <- gg + geom_boxplot(alpha = 0.5) + nolegend +\n  ggtitle(\"Box Plot\")\ncp <- gg + stat_summary(fun = mean, geom = \"col\", fill = \"white\") + nolegend +\n  ggtitle(\"Column Plot\")\ndp <- ggplot(pets, aes(score, colour = pet)) + \n  geom_density() + nolegend +\n  ggtitle(\"Density Plot\")\n```\n:::\n\n\nThen you add all the plots together.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvp + bp + cp + dp\n```\n:::\n\n\nYou can use `+`, `|`, `/`, and parentheses to customise your layout.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n(vp | bp | cp) / dp\n```\n:::\n\n\nYou can alter the plot layout to control the number and widths of plots per row or column, and add annotation. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvp + bp + cp + \n  plot_layout(nrow = 1, width = c(1,2,1)) +\n  plot_annotation(title = \"Pet Scores\",\n                  subtitle = \"Three plots visualising the same data\",\n                  tag_levels = \"a\")\n```\n:::\n\n\n::: {.try data-latex=\"\"}\nCheck the help for `plot_layout()` and plot_annotation()` to see what else you can do with them.\n:::\n\n\n## Overlapping Discrete Data {#overlap}\n\n### Reducing Opacity \n\nYou can deal with overlapping data points (very common if you're using Likert scales) by reducing the opacity of the points. You need to use trial and error to adjust these so they look right.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(age, score, colour = pet)) +\n  geom_point(alpha = 0.25) +\n  geom_smooth(formula = y ~ x, method=\"lm\")\n```\n\n::: {.cell-output-display}\n![Deal with overlapping data using transparency](images/overlap-alpha-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Proportional Dot Plots {#geom_count}\n\nOr you can set the size of the dot proportional to the number of overlapping observations using `geom_count()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(age, score, colour = pet)) +\n  geom_count()\n```\n\n::: {.cell-output-display}\n![Deal with overlapping data using geom_count()](images/overlap-size-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nAlternatively, you can transform your data (we will learn to do this in the [data wrangling](#dplyr) chapter) to create a count column and use the count to set the dot colour.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npets %>%\n  group_by(age, score) %>%\n  summarise(count = n(), .groups = \"drop\") %>%\n  ggplot(aes(age, score, color=count)) +\n  geom_point(size = 2) +\n  scale_color_viridis_c()\n```\n\n::: {.cell-output-display}\n![Deal with overlapping data using dot colour](images/overlap-colour-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n::: {.info data-latex=\"\"}\nThe [viridis package](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html) changes the colour themes to be easier to read by people with colourblindness and to print better in greyscale. Viridis is built into `ggplot2` since v3.0.0. It uses `scale_colour_viridis_c()` and `scale_fill_viridis_c()` for continuous variables and `scale_colour_viridis_d()` and `scale_fill_viridis_d()` for discrete variables.\n:::\n\n## Overlapping Continuous Data\n\nEven if the variables are continuous, overplotting might obscure any relationships if you have lots of data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(age, score)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Overplotted data](images/overplot-point-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### 2D Density Plot {#geom_density2d}\nUse `geom_density2d()` to create a contour map.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(age, score)) +\n  geom_density2d()\n```\n\n::: {.cell-output-display}\n![Contour map with geom_density2d()](images/density2d-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nYou can use `geom_density2d_filled()` to create a heatmap-style density plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(age, score)) +\n  geom_density2d_filled(n = 5, h = 10)\n```\n\n::: {.cell-output-display}\n![Heatmap-density plot](images/density2d-fill-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n::: {.try data-latex=\"\"}\nTry `geom_density2d_filled(n = 5, h = 10)` instead. Play with different values of `n` and `h` and try to guess what they do.\n:::\n\n\n### 2D Histogram {#geom_bin2d}\n\nUse `geom_bin2d()` to create a rectangular heatmap of bin counts. Set the `binwidth` to the x and y dimensions to capture in each box.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(age, score)) +\n  geom_bin2d(binwidth = c(1, 5))\n```\n\n::: {.cell-output-display}\n![Heatmap of bin counts](images/bin2d-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Hexagonal Heatmap {#geom_hex}\n\nUse `geomhex()` to create a hexagonal heatmap of bin counts. Adjust the `binwidth`, `xlim()`, `ylim()` and/or the figure dimensions to make the hexagons more or less stretched.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pets, aes(age, score)) +\n  geom_hex(binwidth = c(1, 5))\n```\n\n::: {.cell-output-display}\n![Hexagonal heatmap of bin counts](images/overplot-hex-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Correlation Heatmap {#geom_tile}\n\nI've included the code for creating a correlation matrix from a table of variables, but you don't need to understand how this is done yet. We'll cover `mutate()` and `gather()` functions in the [dplyr](#dplyr) and [tidyr](#tidyr) lessons.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nheatmap <- pets %>%\n  select_if(is.numeric) %>% # get just the numeric columns\n  cor() %>% # create the correlation matrix\n  as_tibble(rownames = \"V1\") %>% # make it a tibble\n  gather(\"V2\", \"r\", 2:ncol(.)) # wide to long (V2)\n```\n:::\n\n\nOnce you have a correlation matrix in the correct (long) format, it's easy to make a heatmap using `geom_tile()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(heatmap, aes(V1, V2, fill=r)) +\n  geom_tile() +\n  scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![Heatmap using geom_tile()](images/heatmap-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## Glossary {#glossary-ggplot}\n\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> &lt;a href='https://psyteachr.github.io/glossary/c#chunk' target='_blank'&gt;chunk&lt;/a&gt; </td>\n   <td style=\"text-align:left;\"> A section of code in an R Markdown file </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> &lt;a href='https://psyteachr.github.io/glossary/c#continuous' target='_blank'&gt;continuous&lt;/a&gt; </td>\n   <td style=\"text-align:left;\"> Data that can take on any values between other existing values. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> &lt;a href='https://psyteachr.github.io/glossary/d#discrete' target='_blank'&gt;discrete&lt;/a&gt; </td>\n   <td style=\"text-align:left;\"> Data that can only take certain values, such as integers. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> &lt;a href='https://psyteachr.github.io/glossary/g#geom' target='_blank'&gt;geom&lt;/a&gt; </td>\n   <td style=\"text-align:left;\"> The geometric style in which data are displayed, such as boxplot, density, or histogram. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> &lt;a href='https://psyteachr.github.io/glossary/l#likert' target='_blank'&gt;likert&lt;/a&gt; </td>\n   <td style=\"text-align:left;\"> A rating scale with a small number of discrete points in order </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> &lt;a href='https://psyteachr.github.io/glossary/n#nominal' target='_blank'&gt;nominal&lt;/a&gt; </td>\n   <td style=\"text-align:left;\"> Categorical variables that don&amp;#39;t have an inherent order, such as types of animal. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> &lt;a href='https://psyteachr.github.io/glossary/o#ordinal' target='_blank'&gt;ordinal&lt;/a&gt; </td>\n   <td style=\"text-align:left;\"> Discrete variables that have an inherent order, such as level of education or dislike/like. </td>\n  </tr>\n</tbody>\n</table>\n\n\n\n## Further Resources {#resources-ggplot}\n\n* [Data visualisation using R, for researchers who don't use R](https://psyarxiv.com/4huvw/)\n* [Chapter 3: Data Visualisation](http://r4ds.had.co.nz/data-visualisation.html) of *R for Data Science*\n* [ggplot2 cheat sheet](https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf)\n* [ggplot2 FAQs](https://ggplot2.tidyverse.org/articles/)\n* [Chapter 28: Graphics for communication](http://r4ds.had.co.nz/graphics-for-communication.html) of *R for Data Science*\n* [Look at Data](http://socviz.co/look-at-data.html) from [Data Vizualization for Social Science](http://socviz.co/)\n* [Hack Your Data Beautiful](https://psyteachr.github.io/hack-your-data/) workshop by University of Glasgow postgraduate students\n* [Graphs](http://www.cookbook-r.com/Graphs) in *Cookbook for R*\n* [ggplot2 documentation](https://ggplot2.tidyverse.org/reference/)\n* [The R Graph Gallery](http://www.r-graph-gallery.com/) (this is really useful)\n* [Top 50 ggplot2 Visualizations](http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html)\n* [R Graphics Cookbook](http://www.cookbook-r.com/Graphs/) by Winston Chang\n* [ggplot extensions](https://www.ggplot2-exts.org/)\n* [plotly](https://plot.ly/ggplot2/) for creating interactive graphs\n",
    "supporting": [
      "03-ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}